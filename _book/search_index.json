[
["index.html", "SCI 1031 Visualisation et analyse de données spatiales sous R Bienvenue!", " SCI 1031 Visualisation et analyse de données spatiales sous R 2020-04-07 Bienvenue! Bienvenue dans le cours SCI 1031 Visualisation et analyse de données spatiales avec R. "],
["présentation.html", "Présentation", " Présentation Présentation générale du cours Je n’ai jamais utilisé R, puis-je suivre ce cours? "],
["objectifs.html", "Objectifs", " Objectifs Les objectifs du cours sont: À la fin du cours vous saurez … "],
["fonctionnement-du-cours.html", "Fonctionnement du cours", " Fonctionnement du cours Le cours est divisé en X modules et s’échelonne sur 15 semaines. La feuille de route explique … Elle se veut un guide, une suggestion, … Guide des études à distance "],
["rétroaction.html", "Rétroaction", " Rétroaction Mode de communication Temps de réponse aux questions, temps pour remise des notes Accusé de réception Réponses rapides Commentaires "],
["travaux-notés.html", "Travaux notés", " Travaux notés Il y a X travaux noté Les gabarits des travaux notés se trouvent ici X "],
["sources-de-données.html", "Sources de données", " Sources de données Vous pouvez trouver toutes les sources de données utilisées dans ce cours ici X "],
["utilisation-de-r.html", "Utilisation de R", " Utilisation de R Pourquoi utilisons-nous R dans ce cours? Si vous avez des questions, utilisez la rubrique Ressources "],
["feuille-de-route.html", "Feuille de route", " Feuille de route Échéancier semaines vs modules "],
["ressources-r.html", "Ressources R ", " Ressources R "],
["guide-général-r.html", "Guide général R", " Guide général R "],
["les-libraries-r.html", "Les libraries R", " Les libraries R "],
["guide-r-markdown.html", "Guide R-Markdown", " Guide R-Markdown "],
["guide-shiny-app.html", "Guide shiny app", " Guide shiny app "],
["références-r.html", "Références R", " Références R Les couleurs dans R Les thèmes d’une carte "],
["données.html", "Données", " Données Cette rubrique répertorie différentes bases de données spatiales. (!!) Vous êtes tombé sur une base de donnée intéressante qui ne figure pas plus bas? Partagez avec moi votre découverte et je l’ajouterai à cette liste. "],
["données-utilisées-dans-le-cours.html", "Données utilisées dans le cours", " Données utilisées dans le cours "],
["autres-sources-de-données.html", "Autres sources de données", " Autres sources de données "],
["travaux-notés-1.html", "Travaux notés", " Travaux notés Le cours comprends 5 travaux notés et 1 examen à réaliser à la maison. La feuille de route vous fourni les moments auxquels les travaux doivent être entrepris et remis. "],
["travail-noté-1.html", "Travail noté 1", " Travail noté 1 "],
["travail-noté-2.html", "Travail noté 2", " Travail noté 2 "],
["travail-noté-3.html", "Travail noté 3", " Travail noté 3 "],
["travail-noté-4.html", "Travail noté 4", " Travail noté 4 "],
["examen.html", "Examen", " Examen "],
["références.html", "Références", " Références "],
["crédits.html", "Crédits", " Crédits Conceptrice: Élise Filotas "],
["intro.html", "Module 1 Introduction", " Module 1 Introduction L’objectif principal de ce module est À la fin de ce module vous saurez: abc Vous utiliserez les librairies suivantes: Vous apprendrez à utiliser les fonctions suivantes: Dans la section Leçon, vous utiliserez des données XYXYX Dans la section Exercice, vous utiliserez XXXXX "],
["leçon.html", "1.1 Leçon", " 1.1 Leçon 1.1.1 Les données spatiales Les données spatiales d’hier à aujourd’hui La cartographie, la géomatique, la science des données Exemples de données spatiales et d’applications 1.1.2 Les outils Les outils et logiciels de visualisation et d’analyse géospatiale Logiciels commerciaux Logiciels ouverts (open-source) Services d’infonuagique 1.1.3 L’utilisation de R L’utilisation de R pour l’analyse spatiale… Les libraries essentielles: dplyr ggplot2 raster rgdal rasterVis remotes sf sp GISTools "],
["exercice.html", "1.2 Exercice", " 1.2 Exercice 1.2.1 Mon premier R-Markdown "],
["base.html", "Module 2 La représentation spatiale", " Module 2 La représentation spatiale L’objectif principal de ce module est À la fin de ce module vous saurez: Vous utiliserez les librairies suivantes: Vous apprendrez à utiliser les fonctions suivantes: Dans la section Leçon, vous utiliserez des données XYXYX Dans la section Exercice, vous utiliserez XXXXX "],
["leçon-1.html", "2.1 Leçon", " 2.1 Leçon 2.1.1 Les concepts de base Les échelles spatiales (résolution et étendue), la position, la distance, l’interaction, la contiguïté, le voisinage, l’effet de bordure, l’hétérogénéité spatiale, l’organisation spatiale, les gradients, l’anisotropie, l’agrégation, la dépendance spatiale, l’autocorrélation spatiale. Les objets spatiaux, la géométrie, la stationnarité, la bordure Le problème d’agrégation spatiale 2.1.2 La représentation de données spatiales Les données vectorielles (définition, attributs principaux et exemples) Figure 2.1: A caption Les données matricielles (définition, attributs principaux et exemples) 2.1.3 Les systèmes de coordonnées de référence Coordonnées angulaires, projections, notations. "],
["exercice-1.html", "2.2 Exercice", " 2.2 Exercice "],
["vec.html", "Module 3 Les données vectorielles", " Module 3 Les données vectorielles L’objectif principal de ce module est d’apprendre à lire, interpréter et visualiser des données vectorielles. À la fin de ce module vous saurez: Lire un shapefile, explorer ses métadonnées et interpréter sa géométrie Visualiser des données vectorielles de type point, ligne et polygone Visualiser des données vectorielles par attribut Visualiser plusieurs données vectorielles au sein d’une même figure Transformer le système de coordonnées de référence de données vectorielles Vous utiliserez les librairies suivantes: sf rgdal dplyr ggplot2 ggpubr Vous apprendrez à utiliser les fonctions suivantes: st_read(), st_write() st_geometry_type() st_crs() st_bbox() geom_sf filter() st_transform() ggarrange() Dans la section Leçon, vous utiliserez des données vectorielles relatives au réseau de pistes cyclables de la ville de Montréal et aux accidents routiers impliquant des bicyclettes. Ces données sont disponibles ici. Dans la section Exercice, vous utiliserez XXXXX "],
["leçon-2.html", "3.1 Leçon", " 3.1 Leçon L’ensemble du MATERIEL disponible dans ce module est adapté du cours Introduction to Geospatial Raster and Vector Data with R1 de l’organisme Data Carpentry. Data Carpentry développe et offre des formations variées et spécialisées sur le traitement et l’analyse de données. Ses formations s’adressent surtout aux chercheuses et chercheurs scientifiques, mais peuvent être consultées par quiconque car leur matériel est libre d’accès. N’hésitez donc pas à y jeter un coup d’œil. Dans le cadre de cette leçon, nous allons explorer des données vectorielles relatives au réseau de pistes cyclables de la ville de Montréal et aux accidents routiers impliquant des bicyclettes. Téléchargez les données en cliquant sur ce lien. Sauvegardez le dossier compressé (zip) dans votre répertoire de travail ‘Donnees’ pour ce module, et dézippez-le. Le dossier Montreal_Velo comprend trois sous-dossiers: accidents, pistes, et terre. 3.1.1 Introduction aux données vectorielles sous R Lire un shapefile et interpréter sa géométrie Pour lire des données vectorielles contenues dans un fichier shapefile, nous allons utiliser la librairie sf. Notez que la librairie rgdal se charge automatiquement lorsque sf se charge. library(sf) Les shapefiles que nous allons lire sont les suivants : Des données vectorielles de type polygone représentant la frontière de notre zone d’étude, ici, l’île de Montréal. Des données vectorielles de type ligne représentant les pistes cyclables sur l’île de Montréal, et Des données vectorielles de type point représentant la position d’accidents impliquant des bicyclettes. Les premières données vectorielles que nous allons ouvrir contiennent les limites terrestres de l’île de Montréal. Pour lire ces données nous utiliserons la fonction st_read() de la librarie sf. Pour utiliser st_read() nous devons spécifier le chemin menant au fichier shapefile à lire. chemin&lt;-&quot;D:/votrechemin/SCI1031/Module3/Donnees/&quot; nom_du_fichier &lt;- paste(chemin, &quot;/Montreal_Velo/terre/terre_shp.shp&quot;, sep = &quot;&quot;) limites_terrestres &lt;- st_read(nom_du_fichier) Reading layer `terre_shp&#39; from data source `E:\\ELF\\Dropbox\\Teluq\\Enseignement\\Cours\\AnalyseSpatiale\\Developpement\\Structure_test\\sci1031\\Module3\\data\\Montreal_Velo\\terre\\terre_shp.shp&#39; using driver `ESRI Shapefile&#39; Simple feature collection with 72 features and 1 field geometry type: POLYGON dimension: XY bbox: xmin: 267500 ymin: 5029000 xmax: 306700 ymax: 5063000 epsg (SRID): NA proj4string: +proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD83 +units=m +no_defs La fonction st_read() vous permet d’ores et déjà d’obtenir certaines informations sur la structure des données vectorielles que vous venez de lire: le type de géométrie (geometry type), la dimension des données (dimension), l’étendue spatiale des données (bbox), et les informations relatives au système de coordonnées de référence, le SPSG (epsg (SRID)) et la projection (proj4string). Nous explorerons ces propriétés en détails plus bas. Nous allons maintenant lire les données vectorielles de type ligne, en utilisant encore la fonction st_read(). chemin &lt;-&quot;D:/votrechemin/SCI1031/Module3/Donnees/&quot; nom_du_fichier&lt;- paste(chemin, &quot;/Montreal_Velo/pistes/pistes_cyclables_type.shp&quot;, sep = &quot;&quot;) pistes_cyclables &lt;- st_read(nom_du_fichier) Reading layer `pistes_cyclables_type&#39; from data source `E:\\ELF\\Dropbox\\Teluq\\Enseignement\\Cours\\AnalyseSpatiale\\Developpement\\Structure_test\\sci1031\\Module3\\data\\Montreal_Velo\\pistes\\pistes_cyclables_type.shp&#39; using driver `ESRI Shapefile&#39; Simple feature collection with 6395 features and 1 field geometry type: MULTILINESTRING dimension: XY bbox: xmin: 268000 ymin: 5029000 xmax: 306300 ymax: 5063000 epsg (SRID): NA proj4string: +proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD83 +units=m +no_defs Finalement, nous allons lire les données vectorielles de type point, en utilisant toujours la fonction st_read(). chemin&lt;-&quot;D:/votrechemin/SCI1031/Module3/Donnees/&quot; nom_du_fichier&lt;- paste(chemin, &quot;/Montreal_Velo/accidents/accidents2018_Mtl_velo.shp&quot;, sep = &quot;&quot;) pistes_cyclables &lt;- st_read(nom_du_fichier) accidents_velo &lt;- st_read(&quot;Module3/data/Montreal_Velo/accidents/accidents2018_Mtl_velo.shp&quot;) Reading layer `accidents2018_Mtl_velo&#39; from data source `E:\\ELF\\Dropbox\\Teluq\\Enseignement\\Cours\\AnalyseSpatiale\\Developpement\\Structure_test\\sci1031\\Module3\\data\\Montreal_Velo\\accidents\\accidents2018_Mtl_velo.shp&#39; using driver `ESRI Shapefile&#39; Simple feature collection with 796 features and 1 field geometry type: POINT dimension: XY bbox: xmin: 269500 ymin: 5030000 xmax: 305400 ymax: 5059000 epsg (SRID): NA proj4string: +proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD83 +units=m +no_defs Remarquez que le type de géométrie (geometry type) diffère pour les trois classes de données lues. Explorer les métadonnées d’un shapefile Les informations contenues dans un shapefile sont appelées des métadonnées. Nous sommes particulièrement intéressées aux métadonnées géospatiales. Les métadonnées fondamentales d’un shapefile sont : Type de géométrie : le type de classes des données vectorielles téléchargées. La projection : le système de coordonnées de référence utilisé pour représenter les données. L’étendue spatiale : la superficie géographique couvrant les données vectorielles. Nous pouvons explorer chacune de ces métadonnées en utilisant des fonctions de la librairie sf. Le type de géométrie est obtenu par la fonction st_geometry_type(). Par exemple, pour les limites terrestres de la ville de Montréal, nous avons : st_geometry_type(limites_terrestres) [1] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON [7] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON [13] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON [19] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON [25] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON [31] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON [37] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON [43] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON [49] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON [55] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON [61] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON [67] POLYGON POLYGON POLYGON POLYGON POLYGON POLYGON 18 Levels: GEOMETRY POINT LINESTRING ... TRIANGLE Nous avons ainsi la confirmation que ces données vectorielles correspondent des polygones (plus exactement, 72 polygones). Les 18 niveaux donnés en dessous constituent une liste des classes possibles de géométrie. En comparaison, pour les données de type ligne et de type point nous obtenons plutôt : st_geometry_type(pistes_cyclables) [1] MULTILINESTRING MULTILINESTRING MULTILINESTRING [4] MULTILINESTRING MULTILINESTRING MULTILINESTRING ... [6394] MULTILINESTRING MULTILINESTRING 18 Levels: GEOMETRY POINT LINESTRING ... TRIANGLE st_geometry_type(accidents_velo) [1] POINT POINT POINT POINT POINT POINT POINT POINT [9] POINT POINT POINT POINT POINT POINT POINT POINT ... [793] POINT POINT POINT POINT 18 Levels: GEOMETRY POINT LINESTRING ... TRIANGLE Vous remarquez alors que les pistes cyclables sont composées de nombreuses multilignes. Une multiligne étant elle-même un ensemble de lignes. Quant aux accidents de vélo, on en compte 796 en 2018. Vérifions maintenant la projection des shapefiles en utilisant la fonction st_crs() de la librarie sf: st_crs(limites_terrestres) Coordinate Reference System: No EPSG code proj4string: &quot;+proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD83 +units=m +no_defs&quot; st_crs(pistes_cyclables) Coordinate Reference System: No EPSG code proj4string: &quot;+proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD83 +units=m +no_defs&quot; st_crs(accidents_velo) Coordinate Reference System: No EPSG code proj4string: &quot;+proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD83 +units=m +no_defs&quot; Les données de tous les shapefiles sont dans la projection de Mercator transverse (tmerc) et utilisent le Système de référence géodésique nord-américan de 1983 (NAD83). Il n’y a pas de EPSG assigné à ces données. Connaitre le SCR est essentiel pour interpréter l’étendue spatiale des objets spatiaux puisque celui-ci précise, en quelque sorte, les unités de mesure. Pour connaître l’étendue spatiale des shapefiles, nous utilisons la fonction st_bbox() de la librairie sf : st_bbox(limites_terrestres) xmin ymin xmax ymax 267517 5029232 306669 5062642 st_bbox(pistes_cyclables) xmin ymin xmax ymax 267984 5029291 306349 5062582 st_bbox(accidents_velo) xmin ymin xmax ymax 269489 5029752 305368 5059058 L’étendue spatiale d’un shapefile ou d’un objet spatial dans R représente les limites géographiques des données, ou la localisation des données les plus au sud, nord, est et ouest. ICI BESOIN D’UNE FIGURE COMME CELLE DE NEON Finalement, nous pouvons visualiser toutes les métadonnées et les attributs d’un shapefile simplement en écrivant son nom dans la console R: limites_terrestres Simple feature collection with 72 features and 1 field geometry type: POLYGON dimension: XY bbox: xmin: 267500 ymin: 5029000 xmax: 306700 ymax: 5063000 epsg (SRID): NA proj4string: +proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD83 +units=m +no_defs First 10 features: DefaultAtt geometry 1 &lt;NA&gt; POLYGON ((299608 5038364, 2... 2 &lt;NA&gt; POLYGON ((301350 5036978, 3... 3 &lt;NA&gt; POLYGON ((300403 5038997, 3... 4 &lt;NA&gt; POLYGON ((300744 5039496, 3... 5 &lt;NA&gt; POLYGON ((302032 5043372, 3... 6 &lt;NA&gt; POLYGON ((302299 5043145, 3... 7 &lt;NA&gt; POLYGON ((302508 5040978, 3... 8 &lt;NA&gt; POLYGON ((304719 5062024, 3... 9 &lt;NA&gt; POLYGON ((304927 5062499, 3... 10 &lt;NA&gt; POLYGON ((305396 5062622, 3... pistes_cyclables Simple feature collection with 6395 features and 1 field geometry type: MULTILINESTRING dimension: XY bbox: xmin: 268000 ymin: 5029000 xmax: 306300 ymax: 5063000 epsg (SRID): NA proj4string: +proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD83 +units=m +no_defs First 10 features: TYPE_VOIE 1 Piste cyclable sur rue 2 Piste cyclable en site propre 3 Chaussée désignée 4 Bande cyclable 5 Piste cyclable en site propre 6 Piste cyclable en site propre 7 Piste cyclable en site propre 8 Chaussée désignée 9 Piste cyclable en site propre 10 Piste cyclable en site propre geometry 1 MULTILINESTRING ((297752 50... 2 MULTILINESTRING ((305050 50... 3 MULTILINESTRING ((299076 50... 4 MULTILINESTRING ((287779 50... 5 MULTILINESTRING ((300752 50... 6 MULTILINESTRING ((300953 50... 7 MULTILINESTRING ((299010 50... 8 MULTILINESTRING ((276415 50... 9 MULTILINESTRING ((293077 50... 10 MULTILINESTRING ((304787 50... accidents_velo Simple feature collection with 796 features and 1 field geometry type: POINT dimension: XY bbox: xmin: 269500 ymin: 5030000 xmax: 305400 ymax: 5059000 epsg (SRID): NA proj4string: +proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD83 +units=m +no_defs First 10 features: FID geometry 1 0 POINT (279673 5041015) 2 1 POINT (277292 5039169) 3 2 POINT (275581 5036314) 4 3 POINT (274728 5035946) 5 4 POINT (283935 5040875) 6 5 POINT (280442 5039871) 7 6 POINT (279626 5040700) 8 7 POINT (277734 5038853) 9 8 POINT (276487 5038090) 10 9 POINT (278357 5040125) 3.1.2 Visualisation de shapefiles sous R Visualiser des données vectorielles Nous allons maintenant apprendre à visualer des données shapefile en utilisant la fonction ggplot() de la librairie ggplot2. library(ggplot2) Dans un premier temps, visualisons les limites terrestres de l’île de Montréal (Fig 3.1). ggplot() + geom_sf(data = limites_terrestres, size = 1, color = &quot;black&quot;, fill = &quot;white&quot;) + ggtitle(&quot;Limites terrestres de l&#39;île de Montréal&quot;) Figure 3.1: Limites terrestres de l’île de Montréal La fonction geom_sf() permet de faire des représentations simples d’objets vectoriels de différentes géométries (points, lignes ou polygones). Cette fonction peut prendre plusieurs arguments2. Les arguments utilisés ici sont les données, la taille du trait avec laquelle on illustre l’objet, la couleur du trait, et la couleur de la surface délimitée par le trait. La fonction ggtitle permet d’ajouter un titre à la figure générée. Remarquez que chaque fonction est écrite sur sa propre ligne, pour faciliter la lecture des lignes de commande, et que chaque fonction qui s’ajoute à ggplot() est précédée par le signe plus +. Dans un deuxième temps, visualisons les pistes cyclables (Fig 3.2). ggplot() + geom_sf(data = pistes_cyclables, size = 1, color = &quot;darkgreen&quot;) + ggtitle(&quot;Pistes cyclables sur l&#39;île de Montréal&quot;) Figure 3.2: Pistes cyclables sur l’île de Montréal Pour visualiser des lignes, nous n’avons pas besoin de définir l’argument fill. Vous remarquerez que les lignes, cette fois, sont vertes foncées (darkgreen). Il existe 657 couleurs prédéfinies dans R. Taper la commande colors() dans votre console R pour voir afficher le nom des couleurs. Celles-sont sont listées par ordre alphabétique sauf pour la première couleur, qui est le blanc (white). Ainsi, vous pouvez utiliser une couleur en assignant son nom ou son numéro. Pour produire la figure précédente, color = &quot;darkgreen&quot; aurait pu être remplacé par color = colors()[81]. Essayez pour voir. Les couleurs peuvent aussi être définies selon leur composition en rouge, vert et bleu sur un intervalle allant de 0 à 255 - ce qu’on nomme le vecteur RGB (red, green, blue). Par exemple, la couleur jaune est représentée par le vecteur RGB (255, 255, 0). La couleur verte foncée, utilisée précédemment, est, quant à elle, représentée par le vecteur RGB (0, 100, 0). Les couleurs peuvent aussi être exprimée selon le système de notation hexadécimal. La fonction ‘rgb’ permet de traduire un vecteur de couleur RGB en notation hexadécimal. Ainsi, pour produire la figure précédente, nous aurions définir le vecteur vert_fonce = rgb(0, 100, 0, maxColorValue=255), et remplacé color = &quot;darkgreen&quot; par color = vert_fonce. Essayez pour voir. Pour en apprendre davantage sur les couleurs dans R, vous êtes invité à consulter le site Earl Glynn et à conserver dans vos notes son tableau synthèse des couleurs dans R. Finalement, visualisons les accidents de la route impliquant des bicyclettes (Fig 3.3). ggplot() + geom_sf(data = accidents_velo, pch = 19, cex = 1.25, color = &quot;red&quot;) + ggtitle(&quot;Accidents de la route avec cyclistes sur l&#39;île de Montréal&quot;) Figure 3.3: Accidents de la route avec cyclistes sur l’île de Montréal Le symbole utilisé pour illustrer la position des accidents est défini par l’argument pch = 19. Il existe 25 formats de points différents prédéfinis dans R. Les voici: Figure 3.4: Symboles disponibles L’argument cex, quant à lui, indique le facteur par lequel la taille du symbole sera augmentée ou réduite par rapport à 1, la valeur par défaut. Par exemple, ‘cex = 1.5’ indique que le symbole sera 50% plus grand, alors que 0.5 indique que le symbole sera 50% plus petit. Ainsi, nous pouvons changer les valeurs de ces arguments et représenter les accidents de vélo par des triangles oranges (Fig 3.5). ggplot() + geom_sf(data = accidents_velo, pch = 24, cex = 1.5, color = &quot;black&quot;, fill = &quot;orange&quot;) + ggtitle(&quot;Accidents de la route avec cyclistes sur l&#39;île de Montréal&quot;) Figure 3.5: Symbole et couleur différents pour illustrer les accidents de la route avec cyclistes sur l’île de Montréal Visualiser des données vectorielles par attribut Lorsque nous avons affiché les métadonnées du shapefile pistes_cyclables, vous avez peut-être observé que ce dernier comprenait l’attribut TYPE_VOIE qui caractérise le type de pistes cyclables de chaque multiligne. Affichez les métadonnées à nouveau: pistes_cyclables Simple feature collection with 6395 features and 1 field geometry type: MULTILINESTRING dimension: XY bbox: xmin: 268000 ymin: 5029000 xmax: 306300 ymax: 5063000 epsg (SRID): NA proj4string: +proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD83 +units=m +no_defs First 10 features: TYPE_VOIE 1 Piste cyclable sur rue 2 Piste cyclable en site propre 3 Chaussée désignée 4 Bande cyclable 5 Piste cyclable en site propre 6 Piste cyclable en site propre 7 Piste cyclable en site propre 8 Chaussée désignée 9 Piste cyclable en site propre 10 Piste cyclable en site propre geometry 1 MULTILINESTRING ((297752 50... 2 MULTILINESTRING ((305050 50... 3 MULTILINESTRING ((299076 50... 4 MULTILINESTRING ((287779 50... 5 MULTILINESTRING ((300752 50... 6 MULTILINESTRING ((300953 50... 7 MULTILINESTRING ((299010 50... 8 MULTILINESTRING ((276415 50... 9 MULTILINESTRING ((293077 50... 10 MULTILINESTRING ((304787 50... Utilisons la fonction levels pour connaître ces types de voie cyclables. La fonction levels donne les différentes valeurs que peuvent prendre un attribut. levels(pistes_cyclables$TYPE_VOIE) [1] &quot;Bande cyclable&quot; [2] &quot;Chaussée désignée&quot; [3] &quot;Piste cyclable au niveau du trottoir&quot; [4] &quot;Piste cyclable en site propre&quot; [5] &quot;Piste cyclable sur rue&quot; [6] &quot;Sentier polyvalent&quot; Si vous ne connaissez pas la distinction entre ces types d’aménagement cyclable, consulter ce document sommaire de la Ville de Montréal3 Nous voulons maintenant représenter les données vectorielles associées aux pistes cyclables de type &quot;Bande cyclable&quot;. Pour représenter une valeur précise d’un attribut, nous utiliserons la fonction filter de la librarie dplyr. Commençons par charger cette librairie. library(dplyr) Utilisons la fonction filter qui permet de filtrer l’ensemble des valeurs de l’attribut TYPE_VOIE, pour ne retenir que les données dont la valeur est identique (ce qui s’exprime par l’opération ==) à ‘“Bande cyclable”’. Nous nommerons ce sous-ensemble de données Bande. Bande &lt;-pistes_cyclables %&gt;% filter(TYPE_VOIE ==&quot;Bande cyclable&quot;) Nous représentons ce sous-ensemble de données de la même manière que pour l’ensemble complet (Fig 3.2). ggplot()+ geom_sf(data = Bande, size = 1, color = &quot;darkgreen&quot;)+ ggtitle(&quot;Pistes cyclables sur l&#39;île de Montréal&quot;, subtitle = &quot;Bande cyclable&quot;) Figure 3.6: Bandes cyclables sur l’île de Montréal Nous voulons maintenant représenter les six types de voie cyclable par six couleurs différentes. Créons d’abord un vecteur de six couleurs, qu’on appelle une palette de couleurs. couleurs_voie&lt;-c(&quot;darkgreen&quot;, &quot;turquoise&quot;, &quot;yellow&quot;,&quot;darkblue&quot;,&quot;violet&quot;,&quot;orange&quot;) Nous pouvons demander à ggplot d’utiliser ces couleurs pour illustrer les différents types de voie cyclable (Fig 3.7). ggplot()+ geom_sf(data = pistes_cyclables, aes(color = TYPE_VOIE))+ scale_color_manual(values = couleurs_voie)+ labs(color = &#39;Types de voie&#39;)+ ggtitle(&quot;Pistes cyclables sur l&#39;île de Montréal&quot;, subtitle = &quot;Types de voie&quot;) Figure 3.7: Types de voie cyclable sur l’île de Montréal La fonction aes décrit quelles variables dans les données (data) sont illustrées (dans notre exemple, ce sont TYPE_VOIE) et par quelles caractéristiques visuelles4. On nomme ces caractéristiques visuelles les “esthétiques” (aes pour “aesthetic” en anglais). Dans le présent exemple, nous nous préoccupons seulement de la couleur des données vectorielles, mais nous aurions pu aussi changer leur taille, le type de lignes, ou la forme des symboles (si la géométrie des données étaient de type point). La fonction scale_color_manual permet de spécifier nos propres couleurs, sans quoi ce seront les couleurs par défaut qui seront utilisées5. Finalement, la fonction labs permet d’assigner un titre à la légende, sans quoi c’est le nom de la variable, telle que nous l’avons définie dans R qui sera affichée, ici, TYPE_VOIE. Nous pouvons aussi demander à ggplot de représenter les types de voie cyclable en utilisant différentes tailles de trait. De la même façon que précédemment, nous créons un vecteur de six tailles. tailles_voie&lt;-c(1,1.2,1.5,1.7,2,2.2) Puis représentatons les types de voie cyclable (Fig 3.8). ggplot()+ geom_sf(data = pistes_cyclables, aes(color = TYPE_VOIE, size = TYPE_VOIE))+ scale_color_manual(values = couleurs_voie)+ labs(color = &#39;Types de voie&#39;)+ scale_size_manual(values = tailles_voie)+ labs(size = &#39;Types de voie&#39;)+ ggtitle(&quot;Pistes cyclables sur l&#39;île de Montréal&quot;, subtitle = &quot;Types de voie&quot;)+ theme(legend.position = &quot;bottom&quot;) Figure 3.8: Types de voie cyclable sur l’île de Montréal (couleur et taille des traits) La légende tient compte à la fois de la couleur, et de la taille des traits. De plus, nous l’avons affichée au bas de la figure. Visualiser plusieurs shapefiles Nous allons maintenant représenter les données vectorielles limites terrestres, pistes_cyclables et accidents_velo au sein d’une même figure. Il s’agit d’utiliser la fonction geom_sf pour chaque couche de données et de les combiner en utilisant le +. ggplot()+ geom_sf(data = limites_terrestres, size = 1, color = &quot;black&quot;, fill = &quot;white&quot;)+ geom_sf(data = pistes_cyclables, size = 1, color = &quot;darkgreen&quot;)+ geom_sf(data = accidents_velo, pch = 19, cex = 1.25, color = &quot;red&quot;)+ ggtitle(&quot;Pistes cyclables sur l&#39;île de Montréal et Accidents routiers impliquant des vélos&quot;) Figure 3.9: Pistes cyclables et position des accidents routiers impliquant des bicyclettes sur l’île de Montréal Nous pouvons créer une carte plus précise qui spécifie les types de voie cyclable et ajouter une légende. ggplot()+ geom_sf(data = limites_terrestres, size = 1, color = &quot;black&quot;, fill = &quot;white&quot;)+ geom_sf(data = pistes_cyclables, size = 1.5, aes(color = TYPE_VOIE), show.legend = &quot;line&quot;)+ scale_color_manual(values = couleurs_voie,name = &quot;Types de voie&quot;)+ geom_sf(data = accidents_velo, pch = 24, cex = 2, fill = &quot;red&quot;, color = &quot;black&quot;)+ ggtitle(&quot;Types de voie cyclable et Accidents routiers impliquant des vélos&quot;)+ theme( #Caractéristiques de la figure elle-même panel.background = element_rect(fill = &quot;black&quot;), #le dessous de la carte plot.background = element_rect(fill = &quot;black&quot;), #le contour de la carte panel.grid.major = element_blank(), #retirer la grille cartésienne axis.ticks = element_blank(), #retirer les traits sur les axes axis.text.x = element_blank(), #retirer les traits les noms ou les numéros de ces traits axis.text.y = element_blank(), plot.title = element_text(colour = &quot;white&quot;, size = 16, hjust = 0.5), #Centrer le titre de la carte #Caractéristiques de la légende legend.position = &quot;top&quot;, #position de la légende legend.title = element_text(colour=&quot;blue&quot;, size = 11, face = &quot;bold&quot;), #titre de la légende legend.text = element_text(size = 10, face = &quot;italic&quot;), #texte des éléments de la légende legend.background = element_rect(fill = &quot;white&quot;, size = 1, linetype = &quot;solid&quot;, colour = &quot;red&quot;), #rectangle autour de la légende legend.key = element_rect(fill = &quot;white&quot;) #couleur blanche sous les éléments de la légende ) Figure 3.10: Types de voie cyclable et position des accidents routiers impliquant des bicyclettes sur l’île de Montréal La fonction theme() permet de d’ajuster l’apparence de la carte (couleur du fond, couleur, taille et position du titre, format de la légende, etc.). Le chapitre Modify components of theme (Wickham 2016) énumère l’ensemble des paramètres pouvant être modifiés pour changer l’apparence d’une carte. 3.1.3 Reprojection de données vectorielles sous R Dans cette section nous apprendrons à manipuler le système de coordonnées de référence de données vectorielles. Nous avons vu en début de leçon que les données utilisées sont dans la projection de Mercator transverse (tmerc) et utilisent le Système de référence géodésique nord-américan de 1983 (NAD83). Par exemple, pour connaître le SCR des données limites_terrestres nous avions fait. st_crs(limites_terrestres) Coordinate Reference System: No EPSG code proj4string: &quot;+proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD83 +units=m +no_defs&quot; Nous allons maintenant transformer le SCR vers la projection de Robinson (robin) et le Système géodésique mondial de 1984 (WGS84). Pour se faire nous utilisons la fonction st_transform de la librarie st. limites_terrestres_rob &lt;- st_transform(limites_terrestres, CRS(&quot;+proj=robin +datum=WGS84&quot;)) Comparons les données transformées avec les données initiales. Pour se faire, nous voulons représenter les deux cartes une au-dessous de l’autre. La librarie ggpubr permet de créer facilement des figures avec des panneaux multiples. Installez la librarie si ce n’est pas déjà fait, et chargez-là dans votre session de travail. library(ggpubr) carte1&lt;-ggplot()+ geom_sf(data = limites_terrestres, size = 1, color = &quot;black&quot;, fill = &quot;white&quot;) + ggtitle(&quot;Projection Mercator&quot;) carte2&lt;-ggplot()+ geom_sf(data = limites_terrestres_rob, size = 1, color = &quot;black&quot;, fill = &quot;yellow&quot;) + ggtitle(&quot;Projection Robinson&quot;) figure &lt;- ggarrange(carte1, carte2, labels = c(&quot;A&quot;,&quot;B&quot;),ncol = 1, nrow = 2) figure Figure 3.11: Limites terrestres de l’île de Montréal selon les projections Mercartor (A) et Robinson (B) Finalement, pour sauvegarder des données vectorielles, nous utilisons la fonction st_write de la librarie st, de la même façon que nous avons utilisé la fonction st_read en début de leçon. Par exemple, sauvons les données limites_terrestres_rob que nous venons de créer. chemin&lt;-&quot;D:/votrechemin/SCI1031/Module3/Donnees/&quot; nom_du_fichier&lt;- paste(chemin, &quot;/Montreal_Velo/terre/terre_rob_shp.shp&quot;, sep = &quot;&quot;) st_read(limites_terrestres_rob,nom_du_fichier) References "],
["exercice-2.html", "3.2 Exercice", " 3.2 Exercice "],
["mat.html", "Module 4 Les données matricielles", " Module 4 Les données matricielles L’objectif principal de ce module est À la fin de ce module vous saurez: Vous utiliserez les librairies suivantes: Vous apprendrez à utiliser les fonctions suivantes: Dans la section Leçon, vous utiliserez des données XYXYX Dans la section Exercice, vous utiliserez XXXXX "],
["leçon-3.html", "4.1 Leçon", " 4.1 Leçon 4.1.1 Introduction aux données matricielles sous R Lire et explorer les attributs d’un raster Comprendre le SCR Gérer les données manquantes et les mauvaises données Raster mono-bande et multi-bande Écrire des données matricielles 4.1.2 Visualisation de rasters sous R Utiliser ggplot pour visualiser les rasters Visualiser plusieurs couches matricielles Visualiser des données matricielles et vectorielles au sein d’une même figure 4.1.3 Reprojection de données matricielles sous R Manipuler le SCR Manipuler la résolution 4.1.4 Manipulation de rasters multi-bande sous R Visualiser des rasters multi-bande Manipuler des objets RasterStack Manipuler des objets RasterBrick "],
["exercice-3.html", "4.2 Exercice", " 4.2 Exercice "],
["carto.html", "Module 5 La cartographie", " Module 5 La cartographie L’objectif principal de ce module est À la fin de ce module vous saurez: Vous utiliserez les librairies suivantes: Vous apprendrez à utiliser les fonctions suivantes: Dans la section Leçon, vous utiliserez des données XYXYX Dans la section Exercice, vous utiliserez XXXXX "],
["leçon-4.html", "5.1 Leçon", " 5.1 Leçon 5.1.1 Cartographie d’objets vectoriels Carte de base (graticules, échelle, rose des vents, légende, titre). 5.1.2 Cartographie d’objets matriciels Carte de base, rampe de couleurs. 5.1.3 Cartographie en ligne GoogleMap Leaflet OpenStreetMap "],
["exercice-4.html", "5.2 Exercice", " 5.2 Exercice "],
["map-vec.html", "Module 6 La manipulation de données vectorielles", " Module 6 La manipulation de données vectorielles L’objectif principal de ce module est À la fin de ce module vous saurez: Vous utiliserez les librairies suivantes: Vous apprendrez à utiliser les fonctions suivantes: Dans la section Leçon, vous utiliserez des données XYXYX Dans la section Exercice, vous utiliserez XXXXX "],
["leçon-5.html", "6.1 Leçon", " 6.1 Leçon 6.1.1 Opérations de base Supprimer des champs, ajouter des champs, modifier des valeurs de champs, trier la table des attributs. 6.1.2 Opération sur une couche vectorielle Jointure par identifiant, suppression de données, extraction par attributs, dissolution de polygones. 6.1.3 Opération sur plusieurs couches vectorielles Combinaison de couches, jointure spatiale, intersection de couches, découpage d’une couche. "],
["exercice-5.html", "6.2 Exercice", " 6.2 Exercice "],
["map-mat.html", "Module 7 La manipulation de données matricielles", " Module 7 La manipulation de données matricielles L’objectif principal de ce module est À la fin de ce module vous saurez: Vous utiliserez les librairies suivantes: Vous apprendrez à utiliser les fonctions suivantes: Dans la section Leçon, vous utiliserez des données XYXYX Dans la section Exercice, vous utiliserez XXXXX "],
["leçon-6.html", "7.1 Leçon", " 7.1 Leçon 7.1.1 Opérations de base Création d’un raster, création d’un raster multi-couches, opérations mathématiques et statistiques élémentaires. 7.1.2 Opération sur un raster Extraction d’un sous-ensemble de données, suppression de données, modification de données, changement de position 7.1.3 Opération sur plusieurs rasters Combinaison de rasters, jointure spatiale, intersection de couches, découpage d’une couche. "],
["exercice-6.html", "7.2 Exercice", " 7.2 Exercice "],
["spatiotemp.html", "Module 8 Les données spatiotemporelles", " Module 8 Les données spatiotemporelles L’objectif principal de ce module est À la fin de ce module vous saurez: Vous utiliserez les librairies suivantes: Vous apprendrez à utiliser les fonctions suivantes: Dans la section Leçon, vous utiliserez des données XYXYX Dans la section Exercice, vous utiliserez XXXXX "],
["leçon-7.html", "8.1 Leçon", " 8.1 Leçon 8.1.1 Propriétés des données spatiotemporelles 8.1.2 Introduction à la librairie R spacetime Classes de données spatiotemporelles Création d’objet ST Manipulation de bases de données spatiotemporelles 8.1.3 Visualisation Figure à panneaux multiples Figure espace-temps Figure animée "],
["exercice-7.html", "8.2 Exercice", " 8.2 Exercice "],
["analyse.html", "Module 9 L’analyse de données spatiales", " Module 9 L’analyse de données spatiales L’objectif principal de ce module est À la fin de ce module vous saurez: Vous utiliserez les librairies suivantes: Vous apprendrez à utiliser les fonctions suivantes: Dans la section Leçon, vous utiliserez des données XYXYX Dans la section Exercice, vous utiliserez XXXXX "],
["leçon-8.html", "9.1 Leçon", " 9.1 Leçon 9.1.1 Distance Distance entre des points, distance entre des cellules, matrice de distance, distance pour les coordonnées angulaires. 9.1.2 Configuration spatiale Proximité, plus proche voisin, frontière, superficie, connectivité, inclusion, zones tampons, matrice de résistance. 9.1.3 Autocorrélation spatiale Covariance et correlation, autocorrelation temporelle et spatiale, indice de Moran. "],
["exercice-8.html", "9.2 Exercice", " 9.2 Exercice "]
]
